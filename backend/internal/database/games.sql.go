// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: games.sql

package database

import (
	"context"
)

const createGame = `-- name: CreateGame :exec
INSERT INTO games (id, white_player, black_player, result) VALUES (?, ?, ?, ?)
`

type CreateGameParams struct {
	ID          string
	WhitePlayer string
	BlackPlayer string
	Result      interface{}
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) error {
	_, err := q.db.ExecContext(ctx, createGame,
		arg.ID,
		arg.WhitePlayer,
		arg.BlackPlayer,
		arg.Result,
	)
	return err
}

const getGames = `-- name: GetGames :many
SELECT id, white_player, black_player, result FROM games
`

func (q *Queries) GetGames(ctx context.Context) ([]Game, error) {
	rows, err := q.db.QueryContext(ctx, getGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.WhitePlayer,
			&i.BlackPlayer,
			&i.Result,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
